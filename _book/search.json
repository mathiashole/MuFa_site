[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Análisis de Secuencias",
    "section": "",
    "text": "Este libro incluye análisis de características genéticas, frecuencias de dinucleótidos y aminoácidos.",
    "crumbs": [
      "Introducción",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Análisis de Secuencias</span>"
    ]
  },
  {
    "objectID": "geneFeature.html",
    "href": "geneFeature.html",
    "title": "\n2  Análisis genómico comparativo de genes DGF-1 en Trypanosoma Cruzi\n",
    "section": "",
    "text": "2.1 Descripcion\nTrypanosoma cruzi, el parásito causante de la enfermedad de Chagas, posee una familia de genes llamada DGF-1 que juega un papel clave en su biología. En este estudio, realizamos un análisis comparativo de estos genes en distintos genomas para entender su diversidad y posibles funciones.\nLos datos utilizados en este análisis fueron obtenidas a partir de diferentes genomas de Trypanosoma cruzi, disponibles en tritrydb y NCBI.\nA partir de estos genomas, se extrajeron secuencias de los genes DGF-1, con el objetivo de realizar análisis comparativo. Inicialmente se estudió el contenido de GC, longitud de las secuencias, y otros aspectos relevantes para la caracterización de los genes de DGF-1.",
    "crumbs": [
      "Análisis Básico",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Análisis genómico comparativo de genes DGF-1 en *Trypanosoma Cruzi*</span>"
    ]
  },
  {
    "objectID": "geneFeature.html#descripcion",
    "href": "geneFeature.html#descripcion",
    "title": "\n2  Análisis genómico comparativo de genes DGF-1 en Trypanosoma Cruzi\n",
    "section": "",
    "text": "2.1.1 Genomas\nEste análisis utiliza los siguientes genomas TriTrypDB-68_TcruziDm28c2018_Genome.fasta, TriTrypDB-68_TcruziBrazilA4_Genome.fasta, TriTrypDB-68_TcruziYC6_Genome.fasta, TcDm25_TcruziTcDm25H1_Genome.fasta. A partir de los cuales se obtienen las secuencias para su estudio.\n\n2.1.2 Librerias y datos a usar\nSe cargan las bibliotecas necesarias para el análisis de datos genómicos, así como para la manipulación, transformación y visualización de dataframes, junto con la generación de gráficos en formato de arreglo. A continuación, se crea una lista de archivos que contiene los genomas a analizar, y se inicializa una tabla destinada a almacenar los resultados del análisis de los archivos FASTA.\n\nCode# Cargar las librerías necesarias\nlibrary(seqinr)\nlibrary(tidyverse)\nlibrary(gridExtra)\nlibrary(reactable)",
    "crumbs": [
      "Análisis Básico",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Análisis genómico comparativo de genes DGF-1 en *Trypanosoma Cruzi*</span>"
    ]
  },
  {
    "objectID": "geneFeature.html#procesamiento-de-los-genomas",
    "href": "geneFeature.html#procesamiento-de-los-genomas",
    "title": "\n2  Análisis genómico comparativo de genes DGF-1 en Trypanosoma Cruzi\n",
    "section": "\n2.2 Procesamiento de los genomas",
    "text": "2.2 Procesamiento de los genomas\nPara procesar las secuencias FASTA, se crea una función que genera un dataframe vacío donde se almacenarán los elementos obtenidos a partir de una secuencia dada. Luego, se elimina la ruta del archivo para extraer el nombre del mismo. A continuación, se obtiene el identificador de cada una de las secuencias dentro del archivo FASTA, se calcula la longitud de la secuencia y el contenido de GC utilizando funciones de la biblioteca SEQINR.\n\n2.2.1 Características de los genomas\nSe utiliza ALGO la función mencionada para extraer diversas características de los genomas. Con estos datos, generamos la primera Tabla resumen, que agrupa los contigs de cada genoma TriTrypDB-68_TcruziDm28c2018_Genome.fasta, TriTrypDB-68_TcruziBrazilA4_Genome.fasta, TriTrypDB-68_TcruziYC6_Genome.fasta, TcDm25_TcruziTcDm25H1_Genome.fasta, mostrando el número total de secuencias encontradas, así como la longitud mínima, media y máxima, así como el contenido de GC mínimo, medio y máximo.\n\nCode# Load the table generated by the second script\ngenomes &lt;- read.table(\"genome_gc_length.tsv\", sep = \"\\t\", header = TRUE)\n# genomes &lt;- read.csv(\"../output_directory/genome_gc_length.csv\", sep = \",\", header = TRUE)\n\n\n# Crear una tabla con el conteo de secuencias por archivo\ngenomes_summary &lt;- genomes %&gt;%\n  group_by(file) %&gt;%\n  summarise(Total_Sequences = n(),\n            min_length = min(Length),\n            mean_length = round(mean(Length), 0),\n            max_length = max(Length),\n            min_gc = min(GC_Content),\n            mean_gc = round(mean(GC_Content), 3),\n            max_gc = max(GC_Content))\n\n\n\n2.2.2 Tabla resumen de los genomas\n\n\n\n\n\n\n\n2.2.3 Visualización de la Longitud y Contenido de GC de los Genomas\nEn esta sección, se generarán gráficos que representan el contenido de GC y la longitud de cada genoma. Se implementan funciones específicas para cada gráfico, lo que permite reutilizar el código de manera eficiente en otras partes del análisis. Para crear estas funciones se implementara las bibliotecas ggridges, ggbeeswarm y cowplot.\n\n\nGC\nLength\n\n\n\nLa función plot_violin_gc genera un gráfico de violín que muestra la distribución del contenido de GC en distintos genomas TriTrypDB-68_TcruziDm28c2018_Genome.fasta, TriTrypDB-68_TcruziBrazilA4_Genome.fasta, TriTrypDB-68_TcruziYC6_Genome.fasta, TcDm25_TcruziTcDm25H1_Genome.fasta.\nCodelibrary(ggridges)\nlibrary(ggbeeswarm)\nlibrary(cowplot)\n\ngenomes$Length &lt;- as.numeric((format(genomes$Length, scientific = TRUE))) # Changed format\n\n# Inspired by http://tom-e-white.com/datavision/05-genome-size.html domain of https://github.com/tomwhite\n\nplot_violin_gc &lt;- function(data, plot_title, y_label) {\n  # Sorting data\n  data$file &lt;- factor(data$file, levels = sort(unique(data$file)))\n\n  count_data &lt;- data %&gt;%\n    group_by(file) %&gt;%\n    summarise(count = n(), .groups = \"drop\")\n  \n  ggplot(data, aes(x = file, y = GC_Content, fill = file)) +\n    geom_violin(alpha = 0.7, width = 0.5, show.legend = FALSE) + \n    geom_boxplot(width = 0.1, fill = \"white\", alpha = 0.3, show.legend = FALSE) +\n    scale_fill_brewer(palette = \"Dark2\") +\n    \n    geom_text(data = count_data,\n              aes(x = file, y = max(data$GC_Content, na.rm = TRUE) * 1.05, \n                  label = paste0(count)),\n              vjust = 0, color = \"black\", size = 3.5) +\n    \n    labs(\n      title = plot_title,\n      y = y_label#,\n      #caption = \"Data source: Facultad de Ciencias, Udelar\"\n    ) +\n    theme_minimal_vgrid() + \n    theme(\n      axis.line.y = element_blank(),\n      axis.ticks.y = element_blank(),\n      plot.margin = margin(5.5, 5.5, 5.5, 5.5, \"pt\")\n    ) +\n    scale_y_continuous(expand = expansion(mult = c(0.05, 0.15)))\n}\n\n# Function plot_violin_gc call\nplot_violin_gc(\n  data = genomes, \n  plot_title = \"Genome GC\", \n  y_label = \"GC Content\"\n)\n\n\n\n\n\nSecuencias por genoma y contenido GC.\n\n\n\n\n\n\nLa función de R plot_violin_length crea un gráfico de violín que ilustra la distribución de las longitudes genómicas de los diferentes genomas TriTrypDB-68_TcruziDm28c2018_Genome.fasta, TriTrypDB-68_TcruziBrazilA4_Genome.fasta, TriTrypDB-68_TcruziYC6_Genome.fasta, TcDm25_TcruziTcDm25H1_Genome.fasta.\nCodeplot_violin_length &lt;- function(data, type, plot_title, x_label) {\n  set.seed(12345)\n  # Sorting data\n  data$file &lt;- factor(data$file, levels = sort(unique(data$file)))\n\n  plot_data &lt;- data %&gt;%\n    group_by(file) %&gt;%\n    mutate(count = n(),\n           median_length = median(Length)) %&gt;%\n    ungroup() #%&gt;%\n    # mutate(file = reorder(file, -median_length))\n  \n  label_data &lt;- plot_data %&gt;%\n    distinct(file, .keep_all = TRUE)\n  \n  p &lt;- ggplot(plot_data, aes(Length, file, color = file)) +\n    geom_quasirandom(groupOnX = FALSE, show.legend = FALSE, size = 1, dodge.width = 0.9, alpha = 0.4) +\n    labs(\n      title = plot_title,\n      x = x_label#,\n      #caption = \"Data source: Facultad de Ciencias, Udelar\"\n    ) +\n    theme_minimal_vgrid() + \n    theme(\n      axis.title.y = element_blank(),\n      axis.line.y = element_blank(),\n      axis.ticks.y = element_blank(),\n      plot.margin = margin(5.5, 40, 5.5, 5.5, \"pt\")\n    ) +\n    scale_color_brewer(palette = \"Dark2\") +\n    \n    geom_text(data = label_data,\n              aes(x = Inf, y = file, label = paste0(count)),\n              hjust = -0.2, color = \"black\", size = 3.5,\n              position = position_nudge(y = 0)) +\n\n    coord_cartesian(clip = \"off\")\n\n  if (type == \"genome\") {\n    p &lt;- p + scale_x_log10(\n      breaks = c(10^2, 10^3, 10^4, 10^5, 10^6, 10^7, 10^8, 10^9, 10^10),\n      labels = scales::trans_format(\"log10\", scales::math_format(10^.x))\n    )\n  } else {\n    p &lt;- p + scale_x_continuous(expand = expansion(mult = c(0.05, 0.2)))\n  }\n\n  return(p)\n}\n\n# Function plot_violin_length call\nplot_violin_length(\n  data = genomes,\n  \"genome\", \n  plot_title = \"Genome size\", \n  x_label = \"Number of base pairs\"\n)\n\n\n\n\n\nSecuencias por genoma y contenido GC.",
    "crumbs": [
      "Análisis Básico",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Análisis genómico comparativo de genes DGF-1 en *Trypanosoma Cruzi*</span>"
    ]
  },
  {
    "objectID": "geneFeature.html#procesamiento-del-total-de-las-secuencias-codificantes",
    "href": "geneFeature.html#procesamiento-del-total-de-las-secuencias-codificantes",
    "title": "\n2  Análisis genómico comparativo de genes DGF-1 en Trypanosoma Cruzi\n",
    "section": "\n2.3 Procesamiento del total de las secuencias codificantes",
    "text": "2.3 Procesamiento del total de las secuencias codificantes\nSe llama a la funcion calculate_fasta_feature para calcular en el total de secuencia codificante el contenido de GC y la longitud (pb). Finalmente, creamos una tabla resumen, que agrupa el total secuencias codificantes por cada genoma TriTrypDB-68_TcruziDm28c2018_Genome.fasta, TriTrypDB-68_TcruziBrazilA4_Genome.fasta, TriTrypDB-68_TcruziYC6_Genome.fasta, TcDm25_TcruziTcDm25H1_Genome.fasta, mostrando así como la longitud mínima, media y máxima, así como el contenido de GC mínimo, medio y máximo.\n\nCode# Load the table generated by the second script\nall_code_prot_data &lt;- read.table(\"all_code_protein_gc_length.tsv\", sep = \"\\t\", header = TRUE)\n# all_code_prot_data &lt;- read.csv(\"../output_directory/all_code_protein_gc_length.csv\", sep = \",\", header = TRUE)\n\n# Crear una tabla con el conteo de secuencias por archivo\nall_code_prot_summary &lt;- all_code_prot_data %&gt;%\n  group_by(file) %&gt;%\n  summarise(Total_Sequences = n(),\n            min_length = min(Length),\n            mean_length = round(mean(Length), 0),\n            max_length = max(Length),\n            min_gc = min(GC_Content),\n            mean_gc = round(mean(GC_Content), 3),\n            max_gc = max(GC_Content))\n\n\n\n2.3.1 Tabla resumen de secuencias codificantes por genoma\n\n\n\n\n\n\n\n\nGC\nLength\n\n\n\nLlamamos a la funcion plot_violin_gc, dando lugar a un gráfico violín que muestra la distribución del contenido de GC en distintos genomas de las secuencias.\nCode# Function plot_violin_gc call\nplot_violin_gc(\n  data = all_code_prot_data, \n  plot_title = \"Coding sequence GC\", \n  y_label = \"GC Content\"\n)\n\n\n\n\n\nSecuencias por genoma y contenido GC.\n\n\n\n\n\n\nAdemás, reutilizamos la función previamente empleada para graficar la distribución del genoma, pero esta vez generamos un gráfico que muestra la distribución de las longitudes de todas las secuencias codificantes, correspondientes a cada genoma.\nCode# Function plot_violin_length call\nplot_violin_length(\n  data = all_code_prot_data,\n  \"genome\", \n  plot_title = \"coding sequence size\", \n  x_label = \"Number of base pairs\"\n)\n\n\n\n\n\nSecuencias por genoma y largo total de la secuencia.",
    "crumbs": [
      "Análisis Básico",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Análisis genómico comparativo de genes DGF-1 en *Trypanosoma Cruzi*</span>"
    ]
  },
  {
    "objectID": "geneFeature.html#procesamiento-de-las-secuencias-dgf-1",
    "href": "geneFeature.html#procesamiento-de-las-secuencias-dgf-1",
    "title": "\n2  Análisis genómico comparativo de genes DGF-1 en Trypanosoma Cruzi\n",
    "section": "\n2.4 Procesamiento de las secuencias DGF-1\n",
    "text": "2.4 Procesamiento de las secuencias DGF-1\n\nLa función calculate_fasta_feature se usa para calcular para cada secuencia el contenido de GC y la longitud (pb) de DGF-1. Se crea una tabla resumen, que agrupa las secuencias por cada genoma TriTrypDB-68_TcruziDm28c2018_Genome.fasta, TriTrypDB-68_TcruziBrazilA4_Genome.fasta, TriTrypDB-68_TcruziYC6_Genome.fasta, TcDm25_TcruziTcDm25H1_Genome.fasta, mostrando el DGF-1, así como la longitud mínima, media y máxima, así como el contenido de GC mínimo, medio y máximo.\n\nCodetarget_protein &lt;- read.table(\"all_annotate_gene_gc_length.tsv\", sep = \"\\t\", header = TRUE)\n\n# Crear una tabla con el conteo de secuencias por archivo\nfile_sequence_counts &lt;- target_protein %&gt;%\n  group_by(file) %&gt;%\n  summarise(Total_Sequences = n(),\n            min_length = min(Length),\n            mean_length = round(mean(Length), 0),\n            max_length = max(Length),\n            min_gc = min(GC_Content),\n            mean_gc = round(mean(GC_Content), 3),\n            max_gc = max(GC_Content))\n\n# Mostrar la tabla de conteo de secuencias\nreactable(file_sequence_counts, highlight = TRUE)\n\n\n\n\n\n\n2.4.1 Visualización de la Longitud y Contenido de GC de DGF-1\n\nSe generan gráficos que representan el contenido de GC y la longitud de cada secuencia de DGF-1. En esta seccion reutilizaremos parte del codigo escrito llamando a las funciones que crean los plot de GC y de longitud de las secuencias.\n\n\nGC\nLength\n\n\n\nSe usa la funcion plot_violin_gc, dando lugar a un gráfico violín que muestra la distribución del contenido de GC en distintos genomas de las secuencias DGF-1.\nCodevar_title_gc &lt;- paste0(key_name,\" GC\")\n\n# Function plot_violin_gc call\nplot_violin_gc(\n  data = target_protein, \n  plot_title = var_title_gc, \n  y_label = \"GC Content\"\n)\n\n\n\n\n\nSecuencias por genoma y contenido GC.\n\n\n\n\n\n\nSe usa la función previamente empleada para graficar la distribución del genoma, pero esta vez generamos un gráfico que muestra la distribución de las longitudes de las distintas secuencias de DGF-1, correspondientes a cada genoma.\nCodevar_title &lt;- paste0(key_name,\" size\")\n\n# Function plot_violin_length call\nplot_violin_length(\n  data = target_protein,\n  \"gene\", \n  plot_title = var_title, \n  x_label = \"Number of base pairs\"\n)\n\n\n\n\n\nSecuencias por genoma y largo total de la secuencia.",
    "crumbs": [
      "Análisis Básico",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Análisis genómico comparativo de genes DGF-1 en *Trypanosoma Cruzi*</span>"
    ]
  },
  {
    "objectID": "geneFeature.html#filtrado-de-las-secuencias-de-dgf-1-por-el-largo",
    "href": "geneFeature.html#filtrado-de-las-secuencias-de-dgf-1-por-el-largo",
    "title": "\n2  Análisis genómico comparativo de genes DGF-1 en Trypanosoma Cruzi\n",
    "section": "\n2.5 Filtrado de las secuencias de DGF-1 por el largo",
    "text": "2.5 Filtrado de las secuencias de DGF-1 por el largo\nSe filtran las secuencias de DGF-1 de acuerdo a un largo mínimo (9900 pb). Las secuencias menores a este minimo se descartaran para este analisis inicial, y serán estudiadas para determinar si son pseudogenes.\n\n2.5.1 Resumen de Información de DGF-1 completas en cada genoma (filtradas por largo)\nSe genera una tabla con las estadístias descriptivas de las DGF-1 completas\n\n\n\n\n\n\n\n2.5.2 Visualización de la Longitud y Contenido de GC de DGF-1 completas\nSe representan el contenido de GC y la longitud de cada secuencia de DGF-1 completas (filtrada por un largo minimo).\n\n\nGC\nLength\n\n\n\nSe usa la funcion plot_violin_gc, para representar la distribución del contenido de GC en distintos genomas de las secuencias DGF-1 filtradas por un largo minimo.\n\n\n\n\n\n\n\n\nSecuencias por genoma y largo total de la secuencia.\n\n\n\n\n\n\nSe usa la función plot_violin_length para representar distribución de las secuencias DGF-1 filtradas.\n\n\n\n\n\n\n\n\nSecuencias por genoma y largo total de la secuencia.",
    "crumbs": [
      "Análisis Básico",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Análisis genómico comparativo de genes DGF-1 en *Trypanosoma Cruzi*</span>"
    ]
  },
  {
    "objectID": "geneFeature.html#resumen-de-información-de-secuencias-anotadas-como-dgf-1-menores-al-largo-minimo-establecido",
    "href": "geneFeature.html#resumen-de-información-de-secuencias-anotadas-como-dgf-1-menores-al-largo-minimo-establecido",
    "title": "\n2  Análisis genómico comparativo de genes DGF-1 en Trypanosoma Cruzi\n",
    "section": "\n2.6 Resumen de Información de secuencias anotadas como DGF-1 menores al largo minimo establecido",
    "text": "2.6 Resumen de Información de secuencias anotadas como DGF-1 menores al largo minimo establecido\nSe crea una nueva tabla resumen a partir de las secuencias que se descartaran por no cumplir con el minimo de largo establecido.",
    "crumbs": [
      "Análisis Básico",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Análisis genómico comparativo de genes DGF-1 en *Trypanosoma Cruzi*</span>"
    ]
  },
  {
    "objectID": "geneFeature.html#caracterizacion-de-los-nuevos-genes-dgf-1-anotados",
    "href": "geneFeature.html#caracterizacion-de-los-nuevos-genes-dgf-1-anotados",
    "title": "\n2  Análisis genómico comparativo de genes DGF-1 en Trypanosoma Cruzi\n",
    "section": "\n2.7 Caracterizacion de los nuevos genes DGF-1 anotados",
    "text": "2.7 Caracterizacion de los nuevos genes DGF-1 anotados\n\nCode# Load the table generated by the second script\nnew_gene_annotate &lt;- read.table(\"new_gene_length_gc.tsv\", sep = \"\\t\", header = TRUE)\n# all_code_prot_data &lt;- read.csv(\"../output_directory/all_code_protein_gc_length.csv\", sep = \",\", header = TRUE)\n\n# Crear una tabla con el conteo de secuencias por archivo\nnew_gene_annotatet_summary &lt;- new_gene_annotate %&gt;%\n  group_by(filename) %&gt;%\n  summarise(Total_Sequences = n(),\n            min_length = min(length),\n            mean_length = round(mean(length), 0),\n            max_length = max(length),\n            min_gc = min(gc_content),\n            mean_gc = round(mean(gc_content), 3),\n            max_gc = max(gc_content))\n\n\n\n2.7.1 Visualización de la Longitud y Contenido de GC de el total de los nuevos genes deDGF-1\n\nSe generan gráficos que representan el contenido de GC y la longitud de cada secuencia de DGF-1 re anotadas. En esta seccion reutilizaremos parte del codigo escrito llamando a las funciones que crean los plot de GC y de longitud de las secuencias.\n\n\nGC\nLength\n\n\n\nSe usa la funcion plot_violin_gc, dando lugar a un gráfico violín que muestra la distribución del contenido de GC en distintos genomas de las secuencias DGF-1.\nCodetotal_gene_annotate &lt;- read.table(\"total_gene_length_gc.tsv\", sep = \"\\t\", header = TRUE)\n\n# total_gene_annotatet_summary &lt;- total_gene_annotate %&gt;%\n#   group_by(file) %&gt;%\n#   summarise(Total_Sequences = n(),\n#             min_length = min(Length),\n#             mean_length = round(mean(Length), 0),\n#             max_length = max(Length),\n#             min_gc = min(GC_Content),\n#             mean_gc = round(mean(GC_Content), 3),\n#             max_gc = max(GC_Content))\n\nvar_title_gc &lt;- paste0(key_name,\" GC\")\n\n# Function plot_violin_gc call\nplot_violin_gc(\n  data = total_gene_annotate, \n  plot_title = var_title_gc, \n  y_label = \"GC Content\"\n)\n\n\n\n\n\nSecuencias por genoma y contenido GC re anotadas\n\n\n\n\n\n\nSe usa la función previamente empleada para graficar la distribución del genoma, pero esta vez generamos un gráfico que muestra la distribución de las longitudes de las distintas secuencias de DGF-1, correspondientes a cada genoma.\nCodevar_title &lt;- paste0(key_name,\" size\")\n\n# Function plot_violin_length call\nplot_violin_length(\n  data = total_gene_annotate,\n  \"gene\", \n  plot_title = var_title, \n  x_label = \"Number of base pairs\"\n)\n\n\n\n\n\nSecuencias por genoma y largo total de la secuencia re anotadas",
    "crumbs": [
      "Análisis Básico",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Análisis genómico comparativo de genes DGF-1 en *Trypanosoma Cruzi*</span>"
    ]
  },
  {
    "objectID": "dinucleotideFreq.html",
    "href": "dinucleotideFreq.html",
    "title": "\n3  Nucleotide frequency\n",
    "section": "",
    "text": "3.1 Análisis de la Frecuencia de Dinucleótidos y Trinucleótidos Mediante PCA\nSe llevó a cabo un análisis de la frecuencia de dinucleótidos y trinucleótidos en una serie de secuencias de ADN con el objetivo de identificar patrones que permitan diferenciar las secuencias de interés. Para ello, se empleó un Análisis de Componentes Principales (PCA), un análisis estadística ampliamente utilizado para la reducción de la dimensionalidad en datos de alta complejidad.\nEl PCA se aplicó a los datos de frecuencia de dinucleótidos y trinucleótidos, lo que permitió proyectar las secuencias en un espacio de menor dimensión, facilitando la visualización y comprensión de las relaciones entre ellas. Las componentes principales seleccionadas explican un porcentaje significativo de la variabilidad observada en las frecuencias, lo que sugiere que estas combinaciones de bases son representativas de las diferencias biológicas presentes en las secuencias.\nCode# Load necessary libraries\n#library(data.table)\nlibrary(seqinr)\nlibrary(ggplot2)\nlibrary(ggfortify)\nlibrary(Rtsne)\nlibrary(tidyverse)\nCreamos una funcion que está diseñado para calcular las frecuencias de dinucleótidos y trinucleótidos en secuencias de ADN contenidas en archivos FASTA. En este se usara para calcular las frecuencias de dinucleótidos y trinucleótidos de todas las proteinas codificantes de los genomas TriTrypDB-68_TcruziDm28c2018_Genome.fasta, TriTrypDB-68_TcruziBrazilA4_Genome.fasta, TriTrypDB-68_TcruziYC6_Genome.fasta, TcDm25_TcruziTcDm25H1_Genome.fasta y de las secuencias codificantes de DGF-1 en estos genomas.\nCode# Function to count dinucleotides\ncount_dinucleotides &lt;- function(sequence) {\n  # Count dinucleotides\n  counts &lt;- seqinr::count(sequence, 2)\n  # Calculate frequencies\n  freqs &lt;- counts / sum(counts)\n  freqs &lt;- round(freqs, 3)\n  return(freqs)\n}\n\n# Function to count dinucleotides\ncount_trinucleotides &lt;- function(sequence) {\n  # Count dinucleotides\n  counts &lt;- seqinr::count(sequence, 3)\n  # Calculate frequencies\n  freqs &lt;- counts / sum(counts)\n  freqs &lt;- round(freqs, 3)\n  return(freqs)\n}\n\nnucleotide_frequncy &lt;- function(fasta_files, type_frequency = \"dinucleotide\") {\n  results &lt;- data.frame()  # Initialize the empty data frame for the results\n\n  # Iterate over each FASTA file in the folder\n  for (fasta_file in fasta_files) {\n    sequences &lt;- read.fasta(fasta_file)\n    ids &lt;- names(sequences)\n    \n    # Base name of file\n    base_name &lt;- basename(fasta_file)\n    # Regular expresion for extract diferents parts\n    extracted_names &lt;- sub(\".*_([^_]+)\\\\.fasta$\", \"\\\\1\", base_name)\n    \n    # Get dinucleotide or trinucleotide frequencies for each sequence within a file\n    for (i in seq_along(sequences)) {\n      seq &lt;- getSequence(sequences[[i]])\n\n      if (type_frequency == \"trinucleotide\") {\n        freqs &lt;- count_trinucleotides(seq)\n      } else if (type_frequency == \"dinucleotide\") {\n        freqs &lt;- count_dinucleotides(seq)\n      }\n      \n      # Create a row with file name, ID and frequencies\n      row &lt;- c(File = extracted_names, ID = ids[i], freqs)\n      # row &lt;- data.frame(File = extracted_names, ID = ids[i], t(freqs), stringsAsFactors = FALSE)\n\n      results &lt;- results %&gt;% bind_rows(row)\n    }\n  }\n\n  return(results)\n}\nSe llama a la función nucleotide_frequncy() para obtener las tablas de frecuencias de dinucleótidos y trinucleótidos.\nCode# Read data \ndinucleotide_table &lt;- read.table(\"dinucleotide_frequency_anotacion.tsv\", sep = \"\\t\", header = TRUE, stringsAsFactors = FALSE)\n\ntrinucleotide_table &lt;- read.table(\"trinucleotide_frequency_anotacion.tsv\", sep = \"\\t\", header = TRUE, stringsAsFactors = FALSE)\n\ndinucleotide_all_protein_coding &lt;- read.table(\"dinucleotide_frequency_all_protein_coding.tsv\", sep = \"\\t\", header = TRUE, stringsAsFactors = FALSE)\n\ntrinucleotide_all_protein_coding &lt;- read.table(\"trinucleotide_frequency_all_protein_coding.tsv\", sep = \"\\t\", header = TRUE, stringsAsFactors = FALSE)\nAdemás, desarrollamos una función para eliminar símbolos que podrían interferir con la ejecución del código, a la cual denominamos\nCode# function to string manipulation on sequence ID\ntransform_columns &lt;- function(df, cols) {\n  # Iterate over the specified columns\n  for (col in cols) {\n    # Replace '=' with '_'\n    df[[col]] &lt;- gsub(\"=\", \"_\", df[[col]])              \n    # Remove everything after ':' or ';'\n    df[[col]] &lt;- gsub(\"[:;].*\", \"\", df[[col]])          \n  }\n  return(df)  # Return the modified data frame\n}\n\ndinucleotide_table &lt;- transform_columns(dinucleotide_table, \"ID\")\ntrinucleotide_table &lt;- transform_columns(trinucleotide_table, \"ID\")\nEn esta parte, el código crean nuevos data frame llamados combained_dinucleotide y combained_trinucleotide. Estos combinan las frecuencias de dinucleótidos y trinucleótidos complementarios en el ADN. Al unir las frecuencias de estos pares complementarios, se pueden observar patrones adicionales en las frecuencias previamente calculadas para las secuencias codificantes, lo cual es útil para detectar posibles sesgos en la composición del ADN.\nCode# Convert dinucleotide columns to numeric\ncols_to_convert &lt;- c(\"aa\", \"tt\", \"ac\", \"gt\", \"ag\", \"ct\", \"ca\", \"tg\", \"cc\", \"gg\", \"ga\", \"tc\", \"at\", \"cg\", \"gc\", \"ta\")\ndinucleotide_all_protein_coding[cols_to_convert] &lt;- lapply(dinucleotide_all_protein_coding[cols_to_convert], as.numeric)\n\n# Convert trinucleotide columns to numeric\ncols_to_convert_trinucleotides &lt;- c(\"aaa\", \"aag\", \"aat\", \"aca\", \"acc\", \"act\", \"aga\", \"agg\", \"agt\", \"ata\", \"atc\", \"att\", \"caa\", \"cag\", \"cat\", \"cca\", \"ccc\", \"cct\", \"cga\", \"cgg\", \"cgt\", \"cta\", \"ctc\", \"ctt\", \"gaa\", \"gag\", \"gat\", \"gca\", \"gcc\", \"gct\", \"gga\", \"ggc\", \"ggt\", \"gta\", \"gtc\", \"gtt\", \"taa\", \"tag\", \"tat\", \"tca\", \"tcc\", \"tct\", \"tga\", \"tgg\", \"tgt\", \"tta\", \"ttc\", \"ttt\")\ntrinucleotide_all_protein_coding[cols_to_convert_trinucleotides] &lt;- lapply(trinucleotide_all_protein_coding[cols_to_convert_trinucleotides], as.numeric)\n\n\ncombine_data_frequencies &lt;- function(data, genome_col = \"File\", id_col = \"ID\", type) {\n  if (type == \"di\") {\n    result_combained_data &lt;- data.frame(\n      \"Genome\" = data[, genome_col],\n      \"id\" = data[, id_col],\n      \"aa.tt\" = data[,\"aa\"] + data[,\"tt\"],\n      \"ac.gt\" = data[,\"ac\"] + data[,\"gt\"],\n      \"ag.ct\" = data[,\"ag\"] + data[,\"ct\"],\n      \"ca.tg\" = data[,\"ca\"] + data[,\"tg\"],\n      \"cc.gg\" = data[,\"cc\"] + data[,\"gg\"],\n      \"ga.tc\" = data[,\"ga\"] + data[,\"tc\"],\n      \"at\" = data[,\"at\"],\n      \"cg\" = data[,\"cg\"],\n      \"gc\" = data[,\"gc\"],\n      \"ta\" = data[,\"ta\"]\n    )\n  } else if (type == \"tri\") {\n    result_combained_data &lt;- data.frame(\n  \"Genome\" = data[, genome_col],\n  \"id\" = data[, id_col],\n  \"aaa.ttt\" = data[,\"aaa\"] + data[,\"ttt\"],\n  \"aag.ctt\" = data[,\"aag\"] + data[,\"ctt\"],\n  \"aac.gtt\" = data[,\"aac\"] + data[,\"gtt\"],\n  \"aat.att\" = data[,\"aat\"] + data[,\"att\"],\n  \"acc.ggt\" = data[,\"acc\"] + data[,\"ggt\"],\n  \"act.agt\" = data[,\"act\"] + data[,\"agt\"],\n  \"aga.tct\" = data[,\"aga\"] + data[,\"tct\"],\n  \"agg.cct\" = data[,\"agg\"] + data[,\"cct\"],\n  \"ata.tat\" = data[,\"ata\"] + data[,\"tat\"],\n  \"atc.gat\" = data[,\"atc\"] + data[,\"gat\"],\n  \"caa.ttg\" = data[,\"caa\"] + data[,\"ttg\"],\n  \"cag.ctg\" = data[,\"cag\"] + data[,\"ctg\"],\n  \"cat.atg\" = data[,\"cat\"] + data[,\"atg\"],\n  \"cac.gtg\" = data[,\"cac\"] + data[,\"gtg\"],\n  \"cca.tgg\" = data[,\"cca\"] + data[,\"tgg\"],\n  \"ccc.ggg\" = data[,\"ccc\"] + data[,\"ggg\"],\n  \"cga.tcg\" = data[,\"cga\"] + data[,\"tcg\"],\n  \"cta.tag\" = data[,\"cta\"] + data[,\"tag\"],\n  \"gaa.ttc\" = data[,\"gaa\"] + data[,\"ttc\"],\n  \"gag.ctc\" = data[,\"gag\"] + data[,\"ctc\"],\n  \"gat.atc\" = data[,\"gat\"] + data[,\"atc\"],\n  \"gca.tgc\" = data[,\"gca\"] + data[,\"tgc\"],\n  \"gga.tcc\" = data[,\"gga\"] + data[,\"tcc\"],\n  \"ggg.ccc\" = data[,\"ggg\"] + data[,\"ccc\"],\n  \"gta.tac\" = data[,\"gta\"] + data[,\"tac\"],\n  \"gtc.gac\" = data[,\"gtc\"] + data[,\"gac\"],\n  \"taa.tta\" = data[,\"taa\"] + data[,\"tta\"],\n  \"tag.cta\" = data[,\"tag\"] + data[,\"cta\"],\n  \"tat.ata\" = data[,\"tat\"] + data[,\"ata\"],\n  \"tca.tga\" = data[,\"tca\"] + data[,\"tga\"],\n  \"tga.tca\" = data[,\"tga\"] + data[,\"tca\"],\n  \"tta.aag\" = data[,\"tta\"] + data[,\"aag\"]\n)\n  } else {\n    stop(\"Invalid type specified. Use 'di' for dinucleotides or 'tri' for trinucleotides.\")\n  }\n\n  return(result_combained_data)\n}\n\ncombained_dinucleotide &lt;- combine_data_frequencies(dinucleotide_all_protein_coding, type = \"di\")\ncombained_trinucleotide &lt;- combine_data_frequencies(trinucleotide_all_protein_coding, type = \"tri\")\n\nid_vector &lt;- combained_dinucleotide$id\nid_vector1 &lt;- combained_trinucleotide$id\n\n# Transform the ID: remove everything after \";\" and replace \"=\" with \"_\"\nid_vector_cleaned &lt;- gsub(\";.*\", \"\", gsub(\"=\", \"_\", id_vector))\nid_vector_cleaned &lt;- gsub(\"[:;].*\", \"\", id_vector_cleaned) \nid_vector_cleaned1 &lt;- gsub(\";.*\", \"\", gsub(\"=\", \"_\", id_vector1))\nid_vector_cleaned1 &lt;- gsub(\"[:;].*\", \"\", id_vector_cleaned1)  \n# Asignar el vector limpio de vuelta al dataframe\ncombained_dinucleotide$id &lt;- id_vector_cleaned\ncombained_trinucleotide$id &lt;- id_vector_cleaned1",
    "crumbs": [
      "Análisis Básico",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Nucleotide frequency</span>"
    ]
  },
  {
    "objectID": "dinucleotideFreq.html#análisis-de-la-frecuencia-de-dinucleótidos-y-trinucleótidos-mediante-pca",
    "href": "dinucleotideFreq.html#análisis-de-la-frecuencia-de-dinucleótidos-y-trinucleótidos-mediante-pca",
    "title": "\n3  Nucleotide frequency\n",
    "section": "",
    "text": "Dinucleotide PCA\nTrinucleotide PCA\n\n\n\nSe realizó un análisis de componentes principales (PCA) sobre las frecuencias de dinucleótidos combinados en las secuencias codificantes de los genomas TriTrypDB-68_TcruziDm28c2018_Genome.fasta, TriTrypDB-68_TcruziBrazilA4_Genome.fasta, TriTrypDB-68_TcruziYC6_Genome.fasta, TcDm25_TcruziTcDm25H1_Genome.fasta. El PCA permite reducir la dimensionalidad de las frecuencias de dinucleótidos en estas secuencias, facilitando la exploración de las relaciones entre secuencias y sus patrones de composición a nivel de dinucleótidos.\nEn este análisis, se utiliza la función autoplot() para visualizar los resultados del PCA. El total de las secuencias codificantes se colorean según los genomas, y se muestran los vectores de carga (loadings) para identificar qué dinucleótidos tienen mayor influencia en cada componente principal.\n\nCode# Function to perform PCA and graph (require ggplot2 and ggfortify)\n# perform_pca &lt;- function(data, file_col = \"File\", id_col = \"ID\") {\n#   # Exclude 'File' and 'ID' columns from numerical analysis\n#   pca_data &lt;- data[, !(names(data) %in% c(file_col, id_col))]\n#   # Convert all columns to numeric format\n#   pca_data &lt;- as.data.frame(lapply(pca_data, as.numeric))\n#   # Perform the PCA\n#   pca_result &lt;- prcomp(pca_data, scale. = TRUE)\n#   # Get PCA scores\n#   pca_scores &lt;- as.data.frame(pca_result$x)\n#   # Add 'File' and 'ID' columns to PCA results\n#   pca_scores &lt;- cbind(data[, c(file_col, id_col)], pca_scores)\n#   # Plot the PCA with autoplot\n#   pca_plot &lt;- autoplot(pca_result, data = data, colour = file_col, \n#                        loadings = TRUE, loadings.label = TRUE, loadings.colour = 'grey64', \n#                        alpha = 0.2, size = 3) +\n#     theme_minimal()\n  \n#   # Return the results of the PCA and the graph\n#   return(list(pca_result = pca_result, pca_scores = pca_scores, pca_plot = pca_plot))\n# }\n\n# # Call perform_pca\n# perform_result_dinucleotide_pca &lt;- perform_pca(combained_dinucleotide[-nrow(combained_dinucleotide), ], file_col = \"Genome\", id_col = \"id\")\n\n# # show plot\n# perform_result_dinucleotide_pca$pca_plot\n\nperform_pca &lt;- function(data, file_col = \"File\", id_col = \"ID\") {\n  # Validate input data\n  if (!file_col %in% names(data)) {\n    stop(paste(\"Column\", file_col, \"not found in data\"))\n  }\n  if (!id_col %in% names(data)) {\n    stop(paste(\"Column\", id_col, \"not found in data\"))\n  }\n  \n  # Exclude 'file_col' and 'id_col' columns from numerical analysis\n  pca_data &lt;- data[, !(names(data) %in% c(file_col, id_col))]\n  \n  # Convert all columns to numeric, handling non-numeric values and NAs\n  pca_data &lt;- as.data.frame(lapply(pca_data, function(x) {\n    x &lt;- as.numeric(as.character(x))\n    ifelse(is.na(x), 0, x)  # Replace NA with 0 (or adjust based on your preference)\n  }))\n  \n  # Ensure no rows were dropped due to conversion issues\n  if (nrow(pca_data) != nrow(data)) {\n    stop(\"Mismatch between input data rows and processed PCA data rows\")\n  }\n  \n  # Perform the PCA\n  pca_result &lt;- prcomp(pca_data, scale. = TRUE)\n  \n  # Get PCA scores\n  pca_scores &lt;- as.data.frame(pca_result$x)\n  \n  # Add 'file_col' and 'id_col' columns to PCA results\n  pca_scores &lt;- cbind(data[, c(file_col, id_col)], pca_scores)\n  \n  # Plot the PCA using autoplot\n  pca_plot &lt;- autoplot(\n    pca_result, \n    data = data, \n    colour = file_col, \n    loadings = TRUE, \n    loadings.label = TRUE, \n    loadings.colour = 'grey64', \n    alpha = 0.2, \n    size = 1\n  ) +\n    theme_minimal()\n  \n  # Return the results of the PCA and the graph\n  return(list(pca_result = pca_result, pca_scores = pca_scores, pca_plot = pca_plot))\n}\n\n# Call the updated perform_pca function\nperform_result_dinucleotide_pca &lt;- perform_pca(\n  data = combained_dinucleotide, \n  file_col = \"Genome\", \n  id_col = \"id\"\n)\n\n# Show the PCA plot\nperform_result_dinucleotide_pca$pca_plot\n\n\n\n\n\n\n\n\n\nAdemas, se realizó un análisis de componentes principales (PCA) sobre las frecuencias de trinucleótidos combinados en las secuencias codificantes de los genomas TriTrypDB-68_TcruziDm28c2018_Genome.fasta, TriTrypDB-68_TcruziBrazilA4_Genome.fasta, TriTrypDB-68_TcruziYC6_Genome.fasta, TcDm25_TcruziTcDm25H1_Genome.fasta.\n\nCode# Call perform_pca\n# perform_result_trinucleotide_pca &lt;- perform_pca(combained_trinucleotide[-nrow(combained_trinucleotide), ], file_col = \"Genome\", id_col = \"id\")\nperform_result_trinucleotide_pca &lt;- perform_pca(\n  data = combained_dinucleotide, \n  file_col = \"Genome\", \n  id_col = \"id\"\n)\n# show plot\nperform_result_trinucleotide_pca$pca_plot",
    "crumbs": [
      "Análisis Básico",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Nucleotide frequency</span>"
    ]
  },
  {
    "objectID": "dinucleotideFreq.html#plot-pca-marcando-dgf-1",
    "href": "dinucleotideFreq.html#plot-pca-marcando-dgf-1",
    "title": "\n3  Nucleotide frequency\n",
    "section": "\n3.2 plot PCA marcando DGF-1\n",
    "text": "3.2 plot PCA marcando DGF-1\n\n\n\nDinucleotido PCA highlighted\nTrinucleotido PCA highlighted\n\n\n\nEn la siguiente figura se muestra el mismo análisis PCA, pero esta vez solo se han resaltado las secuencias de interés correspondientes a DGF-1 para cada uno de los genomas. Las secuencias restantes se presentan en color gris.\n\nCode## NEED DEBUG CELL\n\nhighlight_ids &lt;- dinucleotide_table$ID\n\ncreate_pca_highlight_plot &lt;- function(data, highlight_ids, pca_result, genome_col = \"Genome\", col_palette = NULL) {\n  # Create a copy of the input data\n  data_all_genomes &lt;- data\n  \n\n  # Create new 'highlight' column that combines 'Highlighted' with the genome column\n  data_all_genomes$highlight &lt;- ifelse(\n    data_all_genomes$id %in% highlight_ids, \n    paste0(\"Highlighted_\", data_all_genomes[[genome_col]]), \n    \"Other\"\n  )\n\n  # Assign transparency values according to the 'highlight' column\n  data_all_genomes$alpha &lt;- ifelse(\n    grepl(\"Highlighted\", data_all_genomes$highlight), 0.6, 0.1\n  )\n  \n  # data_all_genomes &lt;- data_all_genomes[-nrow(data_all_genomes), ]\n\n  # Assign the first two principal components of the PCA\n  data_all_genomes$PC1 &lt;- pca_result$x[, 1]\n  data_all_genomes$PC2 &lt;- pca_result$x[, 2]\n\n  # Define color palette only if it wasn't provided\n  if (is.null(col_palette)) {\n    # Get the unique values of the 'highlight' column and sort them\n    unique_highlight_values &lt;- sort(unique(data_all_genomes$highlight))\n    \n    # Create a color palette that assigns gray to 'Other' and different colors to 'Highlighted_&lt;Genome&gt;'\n    col_palette &lt;- c(scales::hue_pal()(length(unique_highlight_values) - 1), \"grey\")\n    # col_palette &lt;- c(\"#00c496\", \"grey\")\n    \n    # Map color palette to unique highlight values\n    names(col_palette) &lt;- unique_highlight_values\n  }\n  \n  # Create subsets of the data for 'Highlighted' and 'Other'\n  highlighted_points &lt;- subset(data_all_genomes, grepl(\"Highlighted\", highlight))\n  other_points &lt;- subset(data_all_genomes, highlight == \"Other\")\n\n    # Plot with ggplot: first 'Other' and then 'Highlighted'\n  ggplot() +\n    # Layer for non-highlighted points in gray and low transparency\n    geom_point(data = other_points, aes(x = PC1, y = PC2), color = \"grey\", alpha = 0.1, size = 0.8) +\n    # Layer for highlighted points with colors and greater transparency\n    geom_point(data = highlighted_points, aes(x = PC1, y = PC2, color = highlight, alpha = alpha), size = 0.8) +\n    scale_color_manual(values = col_palette) +\n    scale_alpha_continuous(range = c(0.1, 0.6)) + \n    labs(title = \"PCA Highlighting Selected IDs\", x = \"Principal Component 1\", y = \"Principal Component 2\") +\n    theme_minimal()\n}\n\ncreate_pca_highlight_plot(combained_dinucleotide, highlight_ids, perform_result_dinucleotide_pca$pca_result)\n\n\n\n\n\n\nCodelibrary(readr)\n\nwrite_csv(combained_dinucleotide, \"combained_dinucleotide.csv\", col_names = TRUE)\nwrite_tsv(data.frame(ID = highlight_ids), \"highlight_ids.txt\", col_names = FALSE)\n\n\n\n\n\nCodecreate_pca_highlight_plot(combained_trinucleotide, highlight_ids, perform_result_trinucleotide_pca$pca_result)",
    "crumbs": [
      "Análisis Básico",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Nucleotide frequency</span>"
    ]
  },
  {
    "objectID": "dinucleotideFreq.html#plot-pca-por-cada-genoma-marcando-dgf-1",
    "href": "dinucleotideFreq.html#plot-pca-por-cada-genoma-marcando-dgf-1",
    "title": "\n3  Nucleotide frequency\n",
    "section": "\n3.3 plot PCA por cada genoma marcando DGF-1\n",
    "text": "3.3 plot PCA por cada genoma marcando DGF-1\n\n\n\nDinucleotido PCA highlighted per genome\nTrinucleotido PCA highlighted per genome\n\n\n\n\nCode# Create a vector of unique genomes from the dataset\ngenomes &lt;- unique(sort(combained_dinucleotide$Genome))\n\n# Create a color palette that assigns gray to 'Other' and different colors to 'Highlighted_&lt;Genome&gt;'\npalette_to_genome &lt;- c(scales::hue_pal()(length(genomes)), \"grey\")\n\n# Map color palette to genomes (including 'Other' for grey)\nnames(palette_to_genome) &lt;- c(paste0(\"Highlighted_\", genomes), \"Other\")\n\n# Initialize an empty list to store PCA plots for each genome\npca_plots &lt;- list()\n\n# Loop through each genome\nfor (genome in genomes) {\n  # Subset the data for the current genome\n  genome_data &lt;- subset(combained_dinucleotide, Genome == genome)\n  \n  # Perform PCA on the subsetted data\n  pca_result &lt;- perform_pca(genome_data, file_col = \"Genome\", id_col = \"id\")\n  pca_scores &lt;- pca_result$pca_scores\n  \n  pca_plot &lt;- create_pca_highlight_plot(genome_data, highlight_ids, pca_result$pca_result, col_palette = palette_to_genome)\n\n  pca_plots[[genome]] &lt;- pca_plot\n}\n\n# Optionally, you can print or save each plot\nfor (genome in genomes) {\n  print(pca_plots[[genome]])  # Print the plot for each genome\n  # ggsave(paste0(\"PCA_\", genome, \".pdf\"), plot = pca_plots[[genome]])  # Save as PDF if needed\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode# Create a vector of unique genomes from the dataset\ngenomes &lt;- unique(sort(combained_trinucleotide$Genome))\n\n# Initialize an empty list to store PCA plots for each genome\npca_plots &lt;- list()\n\n# Loop through each genome\nfor (genome in genomes) {\n  # Subset the data for the current genome\n  genome_data &lt;- subset(combained_trinucleotide, Genome == genome)\n  \n  # Perform PCA on the subsetted data\n  pca_result &lt;- perform_pca(genome_data, file_col = \"Genome\", id_col = \"id\")\n  pca_scores &lt;- pca_result$pca_scores\n  \n  pca_plot &lt;- create_pca_highlight_plot(genome_data, highlight_ids, pca_result$pca_result, col_palette = palette_to_genome)\n\n  pca_plots[[genome]] &lt;- pca_plot\n}\n\n# Optionally, you can print or save each plot\nfor (genome in genomes) {\n  print(pca_plots[[genome]])  # Print the plot for each genome\n  # ggsave(paste0(\"PCA_\", genome, \".pdf\"), plot = pca_plots[[genome]])  # Save as PDF if needed\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCodewrite_csv(combained_trinucleotide, \"combained_trinucleotide.csv\", col_names = TRUE)\n# write_tsv(data.frame(ID = highlight_ids), \"highlight_ids.txt\", col_names = FALSE)",
    "crumbs": [
      "Análisis Básico",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Nucleotide frequency</span>"
    ]
  },
  {
    "objectID": "dinucleotideFreq.html#análisis-t-sne-de-las-frecuencias-de-dinucleótidos-y-trinucleótidos",
    "href": "dinucleotideFreq.html#análisis-t-sne-de-las-frecuencias-de-dinucleótidos-y-trinucleótidos",
    "title": "\n3  Nucleotide frequency\n",
    "section": "\n3.4 Análisis t-SNE de las Frecuencias de Dinucleótidos y Trinucleótidos",
    "text": "3.4 Análisis t-SNE de las Frecuencias de Dinucleótidos y Trinucleótidos\nSe realizó un análisis de t-distributed Stochastic Neighbor Embedding (t-SNE) sobre las frecuencias de dinucleótidos y trinucleotidos combinados en las secuencias codificantes de los genomas de TriTrypDB-68_TcruziDm28c2018_Genome.fasta, TriTrypDB-68_TcruziBrazilA4_Genome.fasta, TriTrypDB-68_TcruziYC6_Genome.fasta, TcDm25_TcruziTcDm25H1_Genome.fasta. El t-SNE es una técnica de reducción de dimensionalidad que preserva las relaciones locales en los datos, lo que facilita la visualización de agrupamientos o patrones subyacentes en las frecuencias nucleotidicas de las secuencias.\nEn este análisis, se utiliza la función ggplot() para visualizar los resultados del t-SNE, donde las secuencias codificantes se colorean de acuerdo con los genomas. El t-SNE permite explorar las similitudes y diferencias entre las secuencias de forma visual, destacando los patrones de composición a nivel de dinucleótidos.\n\n\nDinucleotido t-SNE highlighted DGF-1\nTrinucleotido t-SNE highlighted DGF-1\n\n\n\nSe realizó un análisis de t-SNE sobre las frecuencias de dinucleótidos resaltando DGF-1 por cada genoma TriTrypDB-68_TcruziDm28c2018_Genome.fasta, TriTrypDB-68_TcruziBrazilA4_Genome.fasta, TriTrypDB-68_TcruziYC6_Genome.fasta, TcDm25_TcruziTcDm25H1_Genome.fasta. El t-SNE permite reducir la dimensionalidad, preservando las relaciones locales de las frecuencias de dinucleótidos, facilitando la exploración de las relaciones entre secuencias y sus patrones de composición a nivel de dinucleótidos.\n\n\nDm28c\n\n\n\nBrazilA4\n\n\n\nYC6\n\n\n\nDm25H1\n\n\n\nAdemas, se realizó un análisis de t-SNE sobre las frecuencias de trinucleótidos resaltando DGF-1 por cada genoma TriTrypDB-68_TcruziDm28c2018_Genome.fasta, TriTrypDB-68_TcruziBrazilA4_Genome.fasta, TriTrypDB-68_TcruziYC6_Genome.fasta, TcDm25_TcruziTcDm25H1_Genome.fasta. Permitiendo reducir la dimensionalidad, preservando las relaciones locales de las frecuencias de trinucleótidos.\n\n\nDm28c\n\n\n\nBrazilA4\n\n\n\nYC6\n\n\n\nDm25H1",
    "crumbs": [
      "Análisis Básico",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Nucleotide frequency</span>"
    ]
  },
  {
    "objectID": "aminoAcidFreq.html",
    "href": "aminoAcidFreq.html",
    "title": "\n4  Amino acid frequency\n",
    "section": "",
    "text": "4.1 🔍 ¿Qué descubrimos?\nEn este análisis entendermos los patrones ocultos en la composición de aminoácidos de proteínas codificantes de Trypanosoma cruzi, comparando:\nCode# Load necessary libraries\n#library(data.table)\nlibrary(seqinr)\nlibrary(ggplot2)\nlibrary(ggfortify)\nlibrary(tidyverse)\nAmino_Acid Three_Letter_Abbreviation One_Letter_Symbol Molecular_Weight\n    Alanine                          Ala                 A               89\n   Arginine                          Arg                 R              174\n  Asparagine                         Asn                 N              132\n Aspartic acid                       Asp                 D              133\n   Cysteine                          Cys                 C              121\n   Glutamine                         Gln                 Q              146\n Glutamic acid                       Glu                 E              147\n    Glycine                          Gly                 G               75\n   Histidine                         His                 H              155\n  Isoleucine                         Ile                 I              131\n    Leucine                          Leu                 L              131\n    Lysine                           Lys                 K              146\n  Methionine                         Met                 M              149\n Phenylalanine                       Phe                 F              165\n    Proline                          Pro                 P              115\n    Serine                           Ser                 S              105\n   Threonine                         Thr                 T              119\n  Tryptophan                         Trp                 W              204\n   Tyrosine                          Tyr                 Y              181\n    Valine                           Val                 V              117\nCodecalculate_amino_acid_frequencies &lt;- function(file) {\n  fasta &lt;- read.fasta(file, seqtype = \"AA\")  # Leer archivo multifasta de aminoácidos\n\n  amino_acids &lt;- c(\"A\", \"R\", \"N\", \"D\", \"C\", \"Q\", \"E\", \"G\", \"H\", \"I\", \"L\", \"K\", \"M\", \"F\", \"P\", \"S\", \"T\", \"W\", \"Y\", \"V\")\n\n  # Procesar cada secuencia en el archivo\n  results &lt;- lapply(names(fasta), function(seq_id) {\n    seq &lt;- toupper(getSequence(fasta[[seq_id]], as.string = TRUE)[[1]])  # Convertir a texto y mayúsculas\n    aa_counts &lt;- table(factor(strsplit(seq, \"\")[[1]], levels = amino_acids))  # Contar aminoácidos con niveles\n\n    total_aa &lt;- sum(aa_counts)  # Total de aminoácidos en la secuencia\n\n    # Crear un dataframe de frecuencias por aminoácido\n    freq_df &lt;- data.frame(AminoAcid = names(aa_counts), \n                          Frequency = as.vector(aa_counts) / total_aa)\n\n    # Pivotar el dataframe para tener aminoácidos como columnas\n    freq_wide &lt;- freq_df %&gt;%\n      pivot_wider(names_from = AminoAcid, values_from = Frequency, \n                  values_fill = list(Frequency = 0))  # Llenar valores faltantes con 0\n\n    # Agregar columnas con el nombre del archivo y el ID de la secuencia\n    freq_wide &lt;- freq_wide %&gt;%\n      mutate(File = basename(file), Sequence_ID = seq_id) %&gt;%\n      relocate(File, Sequence_ID)  # Asegurar el orden de las columnas\n\n    return(freq_wide)\n  })\n\n  # Combinar resultados de todas las secuencias en un archivo\n  bind_rows(results)\n}\n\n# library(readr)\n\n# combined_freqs_coding_prot &lt;- read_tsv(\n#   \"amino_acid_frequency_all_protein_coding.tsv\",\n#   na = c(\"\", \"NA\"),     # Strings a tratar como NA\n#   skip_empty_rows = TRUE\n# )\ncombined_freqs_coding_prot &lt;- readLines(\"amino_acid_frequency_all_protein_coding.tsv\")\ncombined_freqs_coding_prot &lt;- read.delim(text = combined_freqs_coding_prot, header = TRUE)\ncols_num &lt;- 3:22 \ncombined_freqs_coding_prot[cols_num] &lt;- lapply(combined_freqs_coding_prot[cols_num], as.numeric)\n\ncombined_freqs_coding_prot$File &lt;- gsub(\".*_([A-Za-z0-9]+)_translated\\\\.fasta\", \"\\\\1\", combined_freqs_coding_prot$File)\n\nlong_freqs_coding_prot &lt;- combined_freqs_coding_prot %&gt;%\n  pivot_longer(cols = c(3:22),  # Especifica las columnas de aminoácidos\n               names_to = \"AminoAcid\",  # Nombre de la nueva columna para los nombres de los aminoácidos\n               values_to = \"Freq\") %&gt;%  # Nombre de la nueva columna para las frecuencias\n  mutate(Freq = Freq * 100)  # Convertir frecuencias a porcentaje\n\nsummary_data_coding_prot &lt;- long_freqs_coding_prot %&gt;%\n  group_by(File, AminoAcid) %&gt;%\n  summarise(\n    mean_freq = mean(Freq),\n    sd_freq = sd(Freq),\n    .groups = \"drop\"\n)\n\n# Procesar todos los archivos target\nall_frequencies_target &lt;- readLines(\"aminoacid_frequency_re_anotacion.tsv\")\nall_frequencies_target &lt;- read.delim(text = all_frequencies_target, header = TRUE)\namino_acids_one_letter &lt;- 3:22 \nall_frequencies_target[amino_acids_one_letter] &lt;- \n  lapply(all_frequencies_target[amino_acids_one_letter], as.numeric)\n\n# Extraer nombre del archivo\nall_frequencies_target$File &lt;- gsub(\".*_([A-Za-z0-9]+)_translated\\\\.fasta\", \n                                    \"\\\\1\", \n                                    all_frequencies_target$File)\n\n# Reorganizar en formato largo\nlong_freqs_target &lt;- all_frequencies_target %&gt;%\n  pivot_longer(cols = all_of(amino_acids_one_letter), \n               names_to = \"AminoAcid\", \n               values_to = \"Freq\") %&gt;%\n  mutate(Freq = Freq * 100)  # Solo si originalmente está entre 0 y 1\n  \nsummary_data_target &lt;- long_freqs_target %&gt;%\n  group_by(File, AminoAcid) %&gt;%\n  summarise(\n    mean_freq = mean(Freq),\n    sd_freq = sd(Freq),\n    .groups = \"drop\"\n  )",
    "crumbs": [
      "Análisis Básico",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Amino acid frequency</span>"
    ]
  },
  {
    "objectID": "aminoAcidFreq.html#amino-acid-frequency-of-coding-frequency",
    "href": "aminoAcidFreq.html#amino-acid-frequency-of-coding-frequency",
    "title": "\n4  Amino acid frequency\n",
    "section": "\n4.2 Amino acid frequency of coding frequency",
    "text": "4.2 Amino acid frequency of coding frequency\n\nCodeplot_barplot_contrast &lt;- function(data, plot_title, y_label) {\n  dodge &lt;- position_dodge(width = 0.5)  # Define dodge for bar alignment\n  \n  ggplot(data, aes(x = AminoAcid, y = mean_freq, fill = supp)) +\n    geom_bar(\n      stat = \"identity\", \n      alpha = 0.7, \n      width = 0.5, \n      position = dodge\n    ) +\n    ylab(y_label) + \n    labs(\n      title = plot_title,  \n      caption = \"Data source: Facultad de Ciencias, Udelar\"\n    ) +\n    theme_minimal() + \n    theme(\n      axis.line.y = element_blank(), \n      axis.ticks.y = element_blank(),\n      axis.text.x = element_text(angle = 45, hjust = 1)\n    )\n}\n\n# Definir el nombre que se usará como etiqueta para los datos target\nkey_name &lt;- \"Target\"  # Puedes cambiarlo si deseas\n\n# Añadir la columna 'supp' correctamente, asegurando que coincida con las filas\nsummary_data_target$supp &lt;- key_name\nsummary_data_coding_prot$supp &lt;- \"Other\"\n\n# Combinar ambos datasets\ntarget_coding_seq &lt;- bind_rows(summary_data_target, summary_data_coding_prot)\n\n# Mapear las letras de los aminoácidos a abreviaciones de tres letras\namino_acids_one_letter &lt;- c(\"A\", \"R\", \"N\", \"D\", \"C\", \"Q\", \"E\", \"G\", \"H\", \"I\", \n                            \"L\", \"K\", \"M\", \"F\", \"P\", \"S\", \"T\", \"W\", \"Y\", \"V\")\namino_acids_three_letter &lt;- c(\n  \"Ala\", \"Arg\", \"Asn\", \"Asp\", \"Cys\", \n  \"Gln\", \"Glu\", \"Gly\", \"His\", \"Ile\", \n  \"Leu\", \"Lys\", \"Met\", \"Phe\", \"Pro\", \n  \"Ser\", \"Thr\", \"Trp\", \"Tyr\", \"Val\"\n)\n\n# Asegurar que los factores estén en orden correcto con sus etiquetas\ntarget_coding_seq$AminoAcid &lt;- factor(\n  target_coding_seq$AminoAcid,\n  levels = amino_acids_one_letter,\n  labels = amino_acids_three_letter\n)\n\n# Crear el gráfico por cada archivo\nunique_files &lt;- unique(summary_data_target$File)  # o usa target_coding_seq$File si quieres iterar sobre todos\n\nfor (file_name in unique_files) {\n  data_subset &lt;- filter(target_coding_seq, File == file_name | supp == \"Other\")\n  \n  print(plot_barplot_contrast(\n    data_subset, \n    plot_title = paste(\"Amino acid frequency -\", file_name), \n    y_label = \"Amino acid content (%)\"\n  ))\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCodeclassification_aminoacids &lt;- function(data, genome_col = \"File\", id_col = \"Sequence_ID\", type) {\n    result_combained_data &lt;- data.frame(\n      \"Genome\" = data[[ genome_col]],\n      \"id\" = data[[ id_col]],\n      \"Aliphatic\" = rowSums(data[, c(\"G\", \"A\", \"V\", \"L\", \"I\")]),\n      \"Aromatic\" = rowSums(data[, c(\"F\", \"W\", \"Y\")]),\n      \"Sulphur\" = rowSums(data[, c(\"C\", \"M\")]),\n      \"Basic\" = rowSums(data[, c(\"K\", \"R\", \"H\")]),\n      \"Acidic\" = rowSums(data[, c(\"D\", \"E\", \"N\", \"Q\")]),\n      \"AliphaticHydroxyl\" = rowSums(data[, c(\"S\", \"T\")]),\n      \"tRNAsynthetaseClassI\" = rowSums(data[, c(\"E\", \"Q\", \"R\", \"C\", \"M\", \"V\", \"I\", \"L\", \"Y\", \"W\")]),\n      \"tRNAsynthetaseClassII\" = rowSums(data[, c(\"G\", \"A\", \"P\", \"S\", \"T\", \"H\", \"D\", \"N\", \"K\", \"F\")])\n    )\n}\n\nclassfied_amino_acids_targt &lt;- classification_aminoacids(all_frequencies_target)\nclassfied_amino_acids_coding_prot &lt;- classification_aminoacids(combined_freqs_coding_prot)\n\n\n\n\nCodelong_data_target &lt;- classfied_amino_acids_targt %&gt;%\n  pivot_longer(\n    cols = -c(Genome, id),  # Excluir columnas que no se quieren transformar\n    names_to = \"AminoAcidGroup\",\n    values_to = \"Freq\"\n  )\n\nlong_data_coding_prot &lt;- classfied_amino_acids_coding_prot %&gt;%\n  pivot_longer(\n    cols = -c(Genome, id),  # Excluir columnas que no se quieren transformar\n    names_to = \"AminoAcidGroup\",\n    values_to = \"Freq\"\n  )\n\n\nsummary_data_class_target &lt;- long_data_target %&gt;%\n  group_by(Genome, AminoAcidGroup) %&gt;%\n  summarise(\n    mean_freq = mean(Freq),\n    sd_freq = sd(Freq),\n    # supp = supp,\n    .groups = \"drop\"\n)\n\nsummary_data_class_coding_prot &lt;- long_data_coding_prot %&gt;%\n  group_by(Genome, AminoAcidGroup) %&gt;%\n  summarise(\n    mean_freq = mean(Freq),\n    sd_freq = sd(Freq),\n    # supp = supp,\n    .groups = \"drop\"\n)\n\nplot_barplot_contrast_group &lt;- function(data, plot_title, y_label) {\n  dodge &lt;- position_dodge(width = 0.5)  # Definimos un dodge para ambas capas\n  \n  ggplot(data, aes(x = AminoAcidGroup, y = mean_freq, fill = supp)) +\n    geom_bar(\n      stat = \"identity\", \n      alpha = 0.7, \n      width = 0.5, \n      position = dodge\n    ) + \n    geom_errorbar(\n      aes(\n        ymin = mean_freq - sd_freq,\n        ymax = mean_freq + sd_freq\n      ),\n      width = 0.25, \n      colour = \"orange\", \n      alpha = 0.8, \n      size = 0.7,\n      position = dodge  # Aplicamos el mismo dodge para alinear las barras de error\n    ) +\n    # scale_fill_manual(values = c(\"rest\" = \"#E15759\", key_name = \"#5fd4b1\")) +\n    geom_text(\n      aes(label = round(mean_freq, 2)), \n      vjust = -0.5, \n      size = 3, \n      position = dodge  # Alineamos también las etiquetas\n    ) +\n    ylab(y_label) + \n    labs(\n      title = plot_title,  \n      caption = \"Data source: Facultad de Ciencias, Udelar\"\n    ) +\n    theme_minimal() + \n    theme(\n      axis.line.y = element_blank(), \n      axis.ticks.y = element_blank(),\n      axis.text.x = element_text(angle = 45, hjust = 1)\n    )\n}\n\nsummary_data_class_target$supp &lt;- rep(key_name, length(summary_data_class_target$Genome))\nsummary_data_class_coding_prot$supp &lt;- rep(\"rest\", length(summary_data_class_coding_prot$Genome))\n\ntarget_coding_seq_group &lt;- bind_rows(summary_data_class_target, summary_data_class_coding_prot)\n\nunique_files &lt;- unique(target_coding_seq_group$Genome)\n\nfor (file_name in unique_files) {\n  data_subset &lt;- filter(target_coding_seq_group, Genome == file_name)\n  \n  print(plot_barplot_contrast_group(\n    data_subset,\n    plot_title = paste(\"Amino acid frequency -\", file_name), \n    y_label = \"Amino acid content\"\n  ))\n  \n  # readline(prompt = \"Press Enter to see the next plot...\")\n}\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.",
    "crumbs": [
      "Análisis Básico",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Amino acid frequency</span>"
    ]
  }
]